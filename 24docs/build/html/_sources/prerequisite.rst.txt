Prerequisite Learning
========================

IFEWs model is a program built with the **OpenMDAO software framework**, which is a Python-based open-source platform for performing multidisciplinary optimization and systems analysis with high-performance computing capabilities. In case you lack familiarity with OpenMDAO, it is recommended that you review the `OpenMDAO’s documentation <http://openmdao.org/twodocs/versions/latest/index.html>`_. Also, the IFEWs model uses LinearRegression() from the **sklearn linear_model package** to approximate unmeasured and missing data using available historical data. Related information and tutorials can be found at the `scikit-learn’s documentation <https://scikit-learn.org/stable/modules/linear_model.html>`_.

Here, a brief overview of OpenMDAO and sklearn is provided for understanding the fundamental mechanism and the structure of the IFEWs model. 

OpenMDAO basics
------------------------
In OpenMDAO, calculations are carried out inside a Component, which is the smallest unit of computation understood by the framework. Each Component produces its own set of variables. OpenMDAO provides different types of Components for various calculations.

In order to understand the different kinds of components in OpenMDAO, let us consider the following numerical model that takes ``x`` as an input:

.. math::

   \cos(x \cdot y) - z \cdot y = 0

   z = \sin(y)
   
In our numerical model, we have three variables: ``x``, ``y``, and ``z``. Each of these variables needs to be defined as the output of a component. There are three basic types of components in OpenMDAO:

#. ``IndepVarComp`` : defines independent variables (e.g., ``x``)
#. ``ImplicitComponent`` : defines dependent variables that are computed implicitly (e.g., ``y``)
#. ``ExplicitComponent`` : defines dependent variables that are computed explicitly (e.g., ``z``)

The most straightforward way to implement the numerical model would be to assign each variable its own component, as below.

.. list-table:: 
   :widths: 10 50 20 20
   :header-rows: 1

   * - No.
     - Component Type
     - Inputs
     - Outputs
   * - 1
     - IndepVarComp
     -
     - x
   * - 2
     - ImplicitComponent
     - x, z
     - y
   * - 3
     - ImplicitComponent
     - y
     - z

OpenMDAO Monodisciplinary Example
------------------------------------------------
With understanding of the basic structure in the OpenMDAO framework, we can go forward to understand how to set inputs and run the model by using an analytical function. 

Consider a paraboloid, defined by the explicit function where x and y are the inputs to the function. 

.. math::

   f(x,y) = (x - 3.0)^2 + x \times y + (y + 4.0)^2 - 3.0
   
Now we will write a script that defines this equation as a component step by step.

#. **At the top of any script you’ll import openmdao.api module which makes available the most common OpenMDAO classes and functions that are needed to build and run a model**::

	import openmdao.api as om

#. **We define a component which you will always define as a subclass of either ``ExplicitComponent`` or ``ImplicitComponent``. Since our simple paraboloid function is explicit, we’ll use the ``ExplicitComponent``. You see three methods defined**:

	#. ``setup``: define all your inputs and outputs here
	#. ``setup_partials``: declare partial derivatives. OpenMDAO approximates all the partial derivatives using the finite difference method
	#. ``compute``: calculation of all output values for the given inputs
	
::

    class Paraboloid(om.ExplicitComponent):

    def setup(self):
        self.add_input('x', val=0.0)
        self.add_input('y', val=0.0)
        self.add_output('f_xy', val=0.0)

    def setup_partials(self):
        self.declare_partials('*', '*', method='fd')

    def compute(self, inputs, outputs):
        """
        f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3
        """
        x = inputs['x']
        y = inputs['y']

        outputs['f_xy'] = (x - 3.0)**2 + x * y + (y + 4.0)**2 - 3.0
 
#. **We set up the run script of the file.** 
 
All OpenMDAO models are built up from a hierarchy of ``Group`` instances that organize the components, which is ``Paraboloid class`` that we just defined in this example.

Then, we pass it to the constructor of the ``Problem class`` and call the ``setup()`` method on that problem. In this case, ``x`` and ``y`` have the initial values of 3.0 and -4.0 respectively and we call ``run_model()`` to actually perform the computation::

	if __name__ == "__main__":

        model = om.Group()
        model.add_subsystem('parab_comp', Paraboloid())

        prob = om.Problem(model)
        prob.setup()

        prob.set_val('parab_comp.x', 3.0)
        prob.set_val('parab_comp.y', -4.0)

        prob.run_model()
        print(prob['parab_comp.f_xy'])
        
**Here is a complete script that combines all the steps above and an output of the script**::

	import openmdao.api as om

	class Paraboloid(om.ExplicitComponent):

	    def setup(self):
		self.add_input('x', val=0.0)
		self.add_input('y', val=0.0)
		self.add_output('f_xy', val=0.0)

	    def setup_partials(self):
		self.declare_partials('*', '*', method='fd')

	    def compute(self, inputs, outputs):
		"""
		f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3
		"""
		x = inputs['x']
		y = inputs['y']

		outputs['f_xy'] = (x - 3.0)**2 + x * y + (y + 4.0)**2 - 3.0

	if __name__ == "__main__":

		model = om.Group()
		model.add_subsystem('parab_comp', Paraboloid())

		prob = om.Problem(model)
		prob.setup()

		prob.set_val('parab_comp.x', 3.0)
		prob.set_val('parab_comp.y', -4.0)

		prob.run_model()
		print(prob['parab_comp.f_xy'])

**The output of the above model is** ::

	[-15.]

OpenMDAO Multidisciplinary Example
------------------------------------------------
The paraboloid example is the monodisciplinary example in that we built and optimized models comprised of only a single component. However, the IFEWs model is multidisciplinary that involves multiple disciplines and constraints, so it is required to understand how to group components together into a larger model. Now, we’ll work through a slightly more complex problem that involves two disciplines, and hence two main components. 

The output of each component feeds into the input of the other, which creates a coupled model that needs to be converged in order for the outputs to be valid. You can see the coupling between the two disciplines show up through the ``y1`` and ``y_2`` variables in the following diagram that describes the problem structure:

.. image:: figures/multidisciplinary_examples.PNG
  :width: 1000
  :alt: Alternative text


Referring to the components and the methods that we went through in the previous example, we can set up two components foy each of ``y1`` and ``y_2``. ``z1``, ``z2``, ``x``, and ``y2`` are input variables for ``y1``. Similarly, ``z1``, ``z2``, and ``y1`` are input variables for ``y2``.

.. math::

   y_1 = z_1^2 + z_2 + x_1 - 0.2 \cdot y_2
   
   y_2 = \sqrt{y_1} + z_1 + z_2 
   
The code for this model is::

	import openmdao.api as om

	class SellarDis1(om.ExplicitComponent):
	    """
	    Component containing Discipline 1 
	    """

	    def setup(self):
		self.add_input('z', val=np.zeros(2))
	self.add_input('x', val=0.)
	self.add_input('y2', val=1.0)

	self.add_output('y1', val=1.0)

	    def setup_partials(self):
	self.declare_partials('*', '*', method='fd')

	    def compute(self, inputs, outputs):
	z1 = inputs['z'][0]
		z2 = inputs['z'][1]
		x1 = inputs['x']
		y2 = inputs['y2']

		outputs['y1'] = z1**2 + z2 + x1 - 0.2*y2

	class SellarDis2(om.ExplicitComponent):
	    """
	    Component containing Discipline 2 
	    """

	    def setup(self):
	self.add_input('z', val=np.zeros(2))
	self.add_input('y1', val=1.0)

	self.add_output('y2', val=1.0)

	    def setup_partials(self):
	self.declare_partials('*', '*', method='fd')

	    def compute(self, inputs, outputs):
	z1 = inputs['z'][0]
		z2 = inputs['z'][1]
		y1 = inputs['y1']

		outputs['y2'] = y1**.5 + z1 + z2

We’ve defined the two disciplinary components, but there are still three outputs of the model that need to be computed: ``objective``, ``constraint1``, and ``constraint2``. Now, we need to group the multiple components altogether and tell OpenMDAO how to pass data between them. 
We will work with a new class: ``Group`` which can contain other groups, components, or combinations of groups and components.

First, we define our own custom ``Group`` subclass called ``SellarMDA``. In our run script, we create an instance of ``SellarMDA`` to actually run it. Then, inside the ``setup`` method of ``SellarMDA``, we work directly with a ``Group`` instance by adding the ``subsystem cycle``::

	class SellarMDA(om.Group):
	    """
	    Group containing the Sellar MDA.
	    """

	    def setup(self):
		cycle = self.add_subsystem('cycle', om.Group(), promotes=['*'])
		cycle.add_subsystem('d1', SellarDis1(), promotes_inputs=['x', 'z', 'y2'],
		                    promotes_outputs=['y1'])
		cycle.add_subsystem('d2', SellarDis2(), promotes_inputs=['z', 'y1'],
		                    promotes_outputs=['y2'])

		cycle.set_input_defaults('x', 1.0)
		cycle.set_input_defaults('z', np.array([5.0, 2.0]))

		# Nonlinear Block Gauss Seidel is a gradient free solver
		cycle.nonlinear_solver = om.NonlinearBlockGS()

		self.add_subsystem('obj_cmp', om.ExecComp('obj = x**2 + z[1] + y1 + exp(-y2)',
		                                          z=np.array([0.0, 0.0]), x=0.0),
		                   promotes=['x', 'z', 'y1', 'y2', 'obj'])

		self.add_subsystem('con_cmp1', om.ExecComp('con1 = 3.16 - y1'), promotes=['con1', 'y1'])
		self.add_subsystem('con_cmp2', om.ExecComp('con2 = y2 - 24.0'), promotes=['con2', 'y2'])

		prob = om.Problem()
		cycle = prob.model.add_subsystem('cycle', om.Group(), promotes=['*'])
		cycle.add_subsystem('d1', SellarDis1(), promotes_inputs=['x', 'z', 'y2'], promotes_outputs=['y1']) 
		cycle.add_subsystem('d2', SellarDis2(), promotes_inputs=['z', 'y1'], promotes_outputs=['y2'])

		cycle.nonlinear_solver = om.NonlinearBlockGS()


Sklearn Linear Model Basics
------------------------------------------------
The following is a method intended for ordinary least squares linear regression::

	class sklearn.linear_model.LinearRegression(*, fit_intercept=True, copy_X=True, n_jobs=None, positive=False) 

``LinearRegression`` fits a linear model with coefficients ``w`` = (w1, …, wp) to minimize the residual sum of squares between the observed targets in the dataset, and the targets predicted by the linear approximation.

.. math::

   \min_{w} \|X \cdot w - y \|_2^2
   
   w = (w1, …, wp)

- Parameters:
    • fit_interceptbool, default=True
	Whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (i.e. data is expected to be centered).

    • copy_Xbool, default=True
	If True, X will be copied; else, it may be overwritten.

    • n_jobsint, default=None
	The number of jobs to use for the computation. This will only provide speedup in case of sufficiently large problems, that is if firstly n_targets > 1 and secondly X is sparse or if positive is set to True. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.

    • positivebool, default=False
	When set to True, forces the coefficients to be positive. This option is only supported for dense arrays.
 
 
Sklearn Linear Model Example
------------------------------------------------
In the IFEWs model which depends on historical data, we use Sklearn linear regression to approximate the data for certain years where we do not have data to represent that term. The steps are the following:

#. We set a linear regression model according to the existing data.
#. We predict the unknown value by inputting a new label. 

- We will use two methods:
    • ``fit(X, y)`` : Fit linear model.
	where ``X`` : {array-like, sparse matrix} of shape (n_samples, n_features) = **Training data**, 
	
	``Y`` : array-like of shape (n_samples,) or (n_samples, n_targets) = **Target values**. 
	
    • ``predict(Z)`` : Predict using the linear model.
	where ``Z`` : array-like or sparse matrix, shape (n_samples, n_features) = **Samples**.

	






























  
  
  
  
  
  
  
  
  
  
  
  
